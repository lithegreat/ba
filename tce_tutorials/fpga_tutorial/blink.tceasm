CODE;
# register usage:
#---------------------
# RF.0 - pattern
# RF.1 - sleep amount in us
# RF.4 - return address

# loop addresses are marked global so they can be seen in simulator
:global mainloop;
:procedure main;
main:
  1 -> RF.0;
mainloop:
  RF.0 -> leds.in1t.write_leds;
  RF.0 -> shifter.in2;
  1    -> shifter.in1t.shl;
  shifter.out -> RF.0;
  128 -> alu_comp.in2;
  RF.0 -> alu_comp.in1t.gt;
  alu_comp.out1 -> bool.0;
  ?bool.0 1 -> RF.0;  # guarded move
  100000 -> RF.1;
  usleep -> gcu.pc.call; # function call
  ...; # Delay slots are visible.
  ...; # This call could have been issued
  ...; # 3 cycles earlier!
  mainloop -> gcu.pc.jump;
  ...; # Other branch commands can't be
  ...; # in delay slots so this can't be
  ...; # issued earlier

:global sloop;
:procedure usleep;
usleep:
  gcu.ra -> RF.4; # "save" return address
  0 -> alu_comp.in2; # 2nd compare operand is static
  RF.1 -> rtimer.in1t.rtimer; # initialize timer
sloop:
  0 -> rtimer.in1t.rtimer; # read timer
  rtimer.out -> alu_comp.in1t.eq;
  alu_comp.out1 -> bool.0;
  !bool.0 sloop -> gcu.pc.jump;
  ...;
  ...;
  ...;
  RF.4 -> gcu.pc.jump;
  ...;
  ...;
  ...;
