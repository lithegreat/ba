// import "rv_base/RV32I.core_desc"

InstructionSet OpenASIP_base extends RV32I {
    instructions {
        // Integer addition. Output 3 is sum of inputs 1 and 2.
        OPENASIP_BASE_ADD {
            // operands: {
            //     unsigned<5> rd [[reg_type=s32]] [[out]];
            //     unsigned<5> rs1 [[reg_type=s32]] [[in]];
            //     unsigned<5> rs2 [[reg_type=s32]] [[in]];
            // }
            // encoding: auto;
            // $opcode = custom-0
            // $func3 = 0
            // $func7 = 0
            encoding: 7'b0000000 :: rs2[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b0001011;
            // assembly: {"OpenASIP_base.ADD", "{name(rd)}, {name(rs1)}, {name(rs2)}"};
            assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
            behavior: {
                if (rd % RFS != 0) X[rd % RFS] = X[rs1 % RFS] + X[rs2 % RFS];
            }
        }
        // Integer subtraction. Input 1 is minuend,  input 2 is subtrahend and output 3 is difference.
        OPENASIP_BASE_SUB {
            // operands: {
            //     unsigned<5> rd [[reg_type=s32]] [[out]];
            //     unsigned<5> rs1 [[reg_type=s32]] [[in]];
            //     unsigned<5> rs2 [[reg_type=s32]] [[in]];
            // }
            // encoding: auto;
            // $opcode = custom-0
            // $func3 = 0
            // $func7 = 1
            encoding: 7'b0000001 :: rs2[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b0001011;
            // assembly: {"OpenASIP_base.SUB", "{name(rd)}, {name(rs1)}, {name(rs2)}"};
            assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
            behavior: {
                if ((rd % RFS) != 0) X[rd % RFS] = X[rs1 % RFS] - X[rs2 % RFS];
            }
        }
        // Equality comparison. Output 3 returns '1' if inputs 1 and 2 are equal and otherwise returns '0'.
        OPENASIP_BASE_EQ {
            // operands: {
            //     unsigned<0> rd [[reg_type=u1]] [[out]];
            //     unsigned<5> rs1 [[reg_type=s32]] [[in]];
            //     unsigned<5> rs2 [[reg_type=s32]] [[in]];
            // }
            // encoding: auto;
            // $opcode = custom-0
            // $func3 = 0
            // $func7 = 2
            encoding: 7'b0000010 :: rs2[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b0001011;
            // assembly: {"OpenASIP_base.EQ", "{name(rd)}, {name(rs1)}, {name(rs2)}"};
            assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}";
            behavior: {
                if ((rd % RFS) != 0) X[rd % RFS] = (X[rs1 % RFS] == X[rs2 % RFS]);
            }
        }
    }
}